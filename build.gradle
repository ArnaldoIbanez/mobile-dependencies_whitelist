buildscript {
	ext {
		springBootVersion = '1.5.8.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'jacoco'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'maven'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	jcenter()
	maven { url "http://git.ml.com:8081/nexus/content/groups/ML" }
	maven { url "http://git.ml.com:8081/nexus/content/repositories/MLGrailsPlugins" }
	maven { url "http://git.ml.com:8081/nexus/content/groups/Arquitectura" }
}

configurations {
	providedRuntime
}

dependencies {
	compile 'org.codehaus.groovy:groovy-all:2.3.11'
	compile 'log4j:log4j:1.2.16'

	compile 'com.amazonaws:aws-java-sdk:1.11.68'
	compile 'commons-io:commons-io:2.4'
	compile 'com.mercadolibre.melidata.catalog:commons:2.0.1'
	compile group: 'com.facebook.presto', name: 'presto-jdbc', version: '0.220'
	compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
	compile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
	compile group: 'joda-time', name: 'joda-time', version: '2.9.4'
	compile group: 'junit', name: 'junit', version: '4.12'
	compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
	compile 'junit:junit:4.+'
}

jacoco {
	toolVersion = "0.7.1.201405082137"
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled false
	}
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ['**/*'])
		})
	}
}


task wrapper(type: Wrapper) {
	gradleVersion = '2.1'
}

task coverage (dependsOn:[":test",":jacocoTestReport"]) << {
	println("Coverage, check: ${buildDir}/jacocoHtml")
}

task testAll (dependsOn: 'classes', type: JavaExec) {
	main = 'tests'
	classpath = sourceSets.main.runtimeClasspath
	args = ["melidata", "shipping", "advertising", "component_prints", "cx_help_channels", "recommendations"]
}

task uploadAll(type:JavaExec) {
    main = 'uploads'
    classpath = sourceSets.main.runtimeClasspath
    args = ["melidata", "shipping", "advertising", "component_prints", "cx_help_channels", "recommendations"]
}

task testMelidata (dependsOn: 'classes', type: JavaExec) {
	main = 'testCatalog'
	classpath = sourceSets.main.runtimeClasspath
	args = ["melidata"]
}

task testShipping (dependsOn: 'classes', type: JavaExec) {
	main = 'testCatalog'
	classpath = sourceSets.main.runtimeClasspath
	args = ["shipping"]
}

task testAdvertising (dependsOn: 'classes', type: JavaExec) {
	main = 'testCatalog'
	classpath = sourceSets.main.runtimeClasspath
	args = ["advertising"]
}

task testComponentPrints (dependsOn: 'classes', type: JavaExec) {
	main = 'testCatalog'
	classpath = sourceSets.main.runtimeClasspath
	args = ["component_prints"]
}

task testCxHelpChannels (dependsOn: 'classes', type: JavaExec) {
	main = 'testCatalog'
	classpath = sourceSets.main.runtimeClasspath
	args = ["cx_help_channels"]
}

task testRecommendations (dependsOn: 'classes', type: JavaExec) {
	main = 'testCatalog'
	classpath = sourceSets.main.runtimeClasspath
	args = ["recommendations"]
}

task testCronnedQueries (dependsOn: 'classes', type: JavaExec) {
	main = 'testCronnedQueries'
	classpath = sourceSets.main.runtimeClasspath
}

task testMetrics (dependsOn: 'classes', type: JavaExec) {
	main = 'testMetrics'
	classpath = sourceSets.main.runtimeClasspath
}

task uploadAllCatalog(type:JavaExec) {
	main = 'com.melidata.definitions.uploaders.CatalogUploader'
	classpath = sourceSets.main.runtimeClasspath
	args = ["melidata", "shipping", "advertising", "component_prints", "cx_help_channels", "recommendations"]
}

task uploadMeliDataCatalog(type:JavaExec) {
	main = 'com.melidata.definitions.uploaders.CatalogUploader'
	classpath = sourceSets.main.runtimeClasspath
	args = ["melidata"]
}

task uploadShippingCatalog(type:JavaExec) {
	main = 'com.melidata.definitions.uploaders.CatalogUploader'
	classpath = sourceSets.main.runtimeClasspath
	args = ["shipping"]
}

task uploadAdvertisingCatalog(type:JavaExec) {
	main = 'com.melidata.definitions.uploaders.CatalogUploader'
	classpath = sourceSets.main.runtimeClasspath
	args = ["advertising"]
}

task uploadComponentPrintsCatalog(type:JavaExec) {
	main = 'com.melidata.definitions.uploaders.CatalogUploader'
	classpath = sourceSets.main.runtimeClasspath
	args = ["component_prints"]
}

task uploadCxHelpChannelsPrintsCatalog(type:JavaExec) {
	main = 'com.melidata.definitions.uploaders.CatalogUploader'
	classpath = sourceSets.main.runtimeClasspath
	args = ["cx_help_channels"]
}

task uploadRecommendationsCatalog(type:JavaExec) {
	main = 'com.melidata.definitions.uploaders.CatalogUploader'
	classpath = sourceSets.main.runtimeClasspath
	args = ["recommendations"]
}

task uploadMetrics(type:JavaExec) {
	main = 'com.melidata.definitions.uploaders.MetricsUploader'
	classpath = sourceSets.main.runtimeClasspath
}

task uploadBatchQueries(type:JavaExec) {
	main = 'com.melidata.definitions.uploaders.QueriesUploader'
	classpath = sourceSets.main.runtimeClasspath
}

task exportCronQueries(type:JavaExec) {
	main = 'com.melidata.metrics.format.QueryFormatter'
	classpath = sourceSets.main.runtimeClasspath
}

task validate(type:JavaExec) {
	main = 'com.melidata.definitions.validate.Validate'
	classpath = sourceSets.main.runtimeClasspath
	if (project.hasProperty('args')) args project.args.split()
}

task uploadWhitelist(type:JavaExec) {
	main = 'com.melidata.definitions.uploaders.WhitelistPathUploader'
	classpath = sourceSets.main.runtimeClasspath
}

task exportMelidata(type:JavaExec) {
	def mainClass
	if (format == 'hive')
		mainClass = "com.melidata.definitions.format.HiveFormatter"
	else
		throw new IllegalArgumentException("Invalid format. Must be 'hive' or 'json'")

	main = mainClass
	classpath = sourceSets.main.runtimeClasspath
	args ["melidata"]
}

task exportShipping(type:JavaExec) {
	def mainClass
	if (format == 'hive')
		mainClass = "com.melidata.definitions.format.HiveFormatter"
	else
		throw new IllegalArgumentException("Invalid format. Must be 'hive' or 'json'")
	main = mainClass
	classpath = sourceSets.main.runtimeClasspath
	args ["shipping"]
}

task exportAdvertising(type:JavaExec) {
	def mainClass
	if (format == 'hive')
		mainClass = "com.melidata.definitions.format.HiveFormatter"
	else
		throw new IllegalArgumentException("Invalid format. Must be 'hive' or 'json'")
	main = mainClass
	classpath = sourceSets.main.runtimeClasspath
	args ["advertising"]
}

task exportComponentPrints(type:JavaExec) {
	def mainClass
	if (format == 'hive')
		mainClass = "com.melidata.definitions.format.HiveFormatter"
	else
		throw new IllegalArgumentException("Invalid format. Must be 'hive' or 'json'")
	main = mainClass
	classpath = sourceSets.main.runtimeClasspath
	args ["component_prints"]
}

task exportCxHelpChannels(type:JavaExec) {
	def mainClass
	if (format == 'hive')
		mainClass = "com.melidata.definitions.format.HiveFormatter"
	else
		throw new IllegalArgumentException("Invalid format. Must be 'hive' or 'json'")
	main = mainClass
	classpath = sourceSets.main.runtimeClasspath
	args ["cx_help_channels"]
}

task exportRecommendations(type:JavaExec) {
	def mainClass
	if (format == 'hive')
		mainClass = "com.melidata.definitions.format.HiveFormatter"
	else
		throw new IllegalArgumentException("Invalid format. Must be 'hive' or 'json'")
	main = mainClass
	classpath = sourceSets.main.runtimeClasspath
	args ["recommendations"]
}

task exportMetrics(type:JavaExec) {
	main = "com.melidata.metrics.format.MetricsFormatter"
	classpath = sourceSets.main.runtimeClasspath
}

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: 'http://git.ml.com/nexus/content/repositories/releases') {
				authentication(userName: 'mlGrailsPluginDeployer', password: '123456')
			}
			pom.groupId = 'com.mercadolibre.melidata.catalog'
			pom.artifactId = 'definitions'
			pom.version = '2.0.0'
		}
	}
}
