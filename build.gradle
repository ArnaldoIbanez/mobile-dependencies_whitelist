buildscript {
    ext {
        springBootVersion = '1.5.8.RELEASE'
    }
    repositories {
        maven { url "http://maven.artifacts.furycloud.io/repository/all" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'java-library'
    id 'jacoco'
    id 'maven-publish'
    id 'checkstyle'
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'com.mercadolibre.melidata.catalog'
version = '3.0.0'

repositories {
        maven { url "http://maven.artifacts.furycloud.io/repository/all" }
    }

configurations {
    providedRuntime
}

dependencies {
    compile 'log4j:log4j:1.2.16'
    compile 'commons-io:commons-io:2.4'
    compile 'com.mercadolibre.melidata.catalog:commons:3.3.0-fix'
    compile group: 'com.facebook.presto', name: 'presto-jdbc', version: '0.220'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    compile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    compile group: 'joda-time', name: 'joda-time', version: '2.9.4'
    compile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
    compile 'junit:junit:4.+'
}

jacoco {
    toolVersion = "0.7.1.201405082137"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/melidata/definitions/**/*'])
        }))
    }
}

task coverage (dependsOn:[":test",":jacocoTestReport"]) {
    println("Coverage, check: ${buildDir}/jacocoHtml")
}

task testAll (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.TestManager'
    classpath = sourceSets.main.runtimeClasspath
    args = ["melidata", "shipping", "point", "advertising", "component_prints", "cx_help_channels", "recommendations", "merch", "mlo-mon-fda-test-app",
            "mlo-mon-fda-test-app-busi", "mlo-mon-flan", "mlo-mon-fda-items-plus", "mlo-mon-fda-items-plus-busi", "mlo-mon-wagner-deploy", "mlo-mon-fraud-automl-api",
            "mlo-mon-tagging-flammable-text", "mlo-mon-fda-categorizer-aml", "mlo-mon-app-fake", "mlo-mon-fda-scd", "mlo-mon-shipping-time",
            "mlo-mon-gdls-domain-fakes", "mlo-mon-autoofertasfraude", "mlo-mon-aml-cx-med", "mlo-mon-tagging-domain-detector-aws", "mpb-portability",
            "mlo-mon-fda-catalog-discovery", "mlo-mon-fda-fraud-mercadoenvios", "mlo-mon-fraud-marketplace-cancel", "mlo-mon-cx-oneclick-mld",
            "mlo-mon-fraud-fda-tf-pipeline", "mlo-mon-replib-trainer", "mlo-mon-credits-mara", "mlo-mon-credits-pfa", "mlo-mon-cloudeconomics-ecus-fda",
            "mlo-mon-advertising-pads-aml", "mlo-mon-aml-cx-ac", "mlo-mon-fda-scd-severe", "mlo-mon-grupodot-art-prohibidos", "mlo-mon-model-bhv-mlm-eo",
            "mlo-mon-fda-catalog-similarity", "mlo-mon-bhv-negativizados", "mlo-mon-bhv-no-negativizados", "mlo-mon-brand-detector-serving-app", "mp-pospayment-refunds",
            "mlo-mon-consumer-upsell-no-neg", "mlo-mon-consumer-bhv-mlm", "mlo-mon-consumers-upsell-full", "mlo-mon-cx-male-med-mld", "mlo-mon-cx-oneclick-mld-nlp"]
}

task uploadAll(type:JavaExec) {
    main = 'com.melidata.definitions.task.UploadManager'
    classpath = sourceSets.main.runtimeClasspath
    args = ["melidata", "shipping", "point", "advertising", "component_prints", "cx_help_channels", "recommendations", "merch", "mlo-mon-fda-test-app",
    "mlo-mon-fda-test-app-busi", "mlo-mon-flan", "mlo-mon-fda-items-plus", "mlo-mon-fda-items-plus-busi", "mlo-mon-wagner-deploy", "mlo-mon-fraud-automl-api",
    "mlo-mon-tagging-flammable-text", "mlo-mon-fda-categorizer-aml", "mlo-mon-app-fake", "mlo-mon-fda-scd", "mlo-mon-shipping-time",
    "mlo-mon-gdls-domain-fakes", "mlo-mon-autoofertasfraude", "mlo-mon-aml-cx-med", "mlo-mon-tagging-domain-detector-aws", "mpb-portability",
    "mlo-mon-fda-catalog-discovery", "mlo-mon-fda-fraud-mercadoenvios", "mlo-mon-fraud-marketplace-cancel", "mlo-mon-cx-oneclick-mld",
    "mlo-mon-fraud-fda-tf-pipeline", "mlo-mon-replib-trainer", "mlo-mon-credits-mara", "mlo-mon-credits-pfa", "mlo-mon-cloudeconomics-ecus-fda",
    "mlo-mon-advertising-pads-aml", "mlo-mon-aml-cx-ac", "mlo-mon-fda-scd-severe", "mlo-mon-grupodot-art-prohibidos", "mlo-mon-model-bhv-mlm-eo", 
    "mlo-mon-fda-catalog-similarity", "mlo-mon-bhv-negativizados", "mlo-mon-bhv-no-negativizados", "mlo-mon-brand-detector-serving-app", "mp-pospayment-refunds",
    "mlo-mon-consumer-upsell-no-neg", "mlo-mon-consumer-bhv-mlm", "mlo-mon-consumers-upsell-full", "mlo-mon-cx-male-med-mld", "mlo-mon-cx-oneclick-mld-nlp"]
}

task testMelidata (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["melidata"]
}

task testShipping (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["shipping"]
}

task testPoint (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["point"]
}

task testAdvertising (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["advertising"]
}

task testComponentPrints (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["component_prints"]
}

task testCxHelpChannels (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["cx_help_channels"]
}

task testRecommendations (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["recommendations"]
}

task testMerch (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["merch"]
}

task testMonitoringTestAppCatalog(dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-test-app"]
}

task testMonitoringTestAppBusiCatalog(dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-test-app-busi"]
}

task testMonitoringFlanAasCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-flan"]
}

task testMonitoringFdaItemsPlusCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-items-plus"]
}

task testMonitoringFdaItemsPlusBusiCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-items-plus-busi"]
}

task testMonitoringWagnerDeployCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-wagner-deploy"]
}

task testMonitoringFraudAutomlApiCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fraud-automl-api"]
}

task testMonitoringFlammableTextCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-tagging-flammable-text"]
}

task testMonitoringFdaCategorizerAmlCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-categorizer-aml"]
}

task testMonitoringAppFakeCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-app-fake"]
}

task testMonitoringFdaSCDCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-scd"]
}

task testMonitoringShippingTimeCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-shipping-time"]
}

task testMonitoringGDLSDomainFakesCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-gdls-domain-fakes"]
}

task testMonitoringAutoofertasCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-autoofertasfraude"]
}

task testMonitoringAmlCXMedCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-aml-cx-med"]
}

task testMonitoringDomainDetectorAwsCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-tagging-domain-detector-aws"]
}

task testPortabilityCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mpb-portability"]
}

task testPospaymentRefundsCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mp-pospayment-refunds"]
}

task testMonitoringFdaCatalogDiscoveryCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-catalog-discovery"]
}

task testMonitoringFdaFraudMercadoenviosCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-fraud-mercadoenvios"]
}

task testMonitoringFraudMarketplaceCancelCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fraud-marketplace-cancel"]
}

task testMonitoringCXOneclickMLDCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-cx-oneclick-mld"]
}

task testMonitoringFraudTFPipelineCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fraud-fda-tf-pipeline"]
}

task testMonitoringReplibTrainerCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-replib-trainer"]
}

task testMonitoringCreditsMaraCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-credits-mara"]
}

task testMonitoringCreditsPFACatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-credits-pfa"]
}

task testMonitoringcloudeconomicsEcusCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-cloudeconomics-ecus-fda"]
}

task testMonitoringAdvertisingPadsAmlCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-advertising-pads-aml"]
}

task testMonitoringAmlCxAcCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-aml-cx-ac"]
}

task testMonitoringFdaSCDSevereCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-scd-severe"]
}

task testMonitoringGrupodotArtProhibidos (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-grupodot-art-prohibidos"]
}

task testMonitoringModelBhvMlmEo (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-model-bhv-mlm-eo"]
}

task testMonitoringFdaCatalogSimilarity (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-catalog-similarity"]
}

task testMonitoringBhvNegativizados (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-bhv-negativizados"]
}

task testMonitoringBhvNoNegativizados (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-bhv-no-negativizados"]
}

task testMonitoringBrandDetectorServingAppCatalog (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-brand-detector-serving-app"]
}

task testMonitoringConsumerUpsellNoNeg (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-consumer-upsell-no-neg"]
}

task testMonitoringConsumerBhvMlm (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-consumer-bhv-mlm"]
}

task testMonitoringConsumersUpsellFull (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-consumers-upsell-full"]
}

task testMonitoringCxMaleMedMLD (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-cx-male-med-mld"]
}

task testMonitoringCxOneclickMLDNLP (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.CatalogTest'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-cx-oneclick-mld-nlp"]
}

task testMetrics (dependsOn: 'classes', type: JavaExec) {
    main = 'com.melidata.definitions.task.MetricsTest'
    classpath = sourceSets.main.runtimeClasspath
}

task uploadAllCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["melidata", "shipping", "point", "advertising", "component_prints", "cx_help_channels", "recommendations", "merch", "mlo-mon-fda-test-app",
    "mlo-mon-fda-test-app-busi", "mlo-mon-flan", "mlo-mon-fda-items-plus", "mlo-mon-fda-items-plus-busi", "mlo-mon-wagner-deploy", "mlo-mon-fraud-automl-api",
    "mlo-mon-tagging-flammable-text", "mlo-mon-fda-categorizer-aml", "mlo-mon-app-fake", "mlo-mon-fda-scd", "mlo-mon-shipping-time",
    "mlo-mon-gdls-domain-fakes", "mlo-mon-autoofertasfraude", "mlo-mon-aml-cx-med", "mlo-mon-tagging-domain-detector-aws", "mpb-portability",
    "mlo-mon-fda-catalog-discovery", "mlo-mon-fda-fraud-mercadoenvios", "mlo-mon-fraud-marketplace-cancel", "mlo-mon-cx-oneclick-mld", 
    "mlo-mon-fraud-fda-tf-pipeline", "mlo-mon-replib-trainer", "mlo-mon-credits-mara", "mlo-mon-credits-pfa", "mlo-mon-cloudeconomics-ecus-fda",
    "mlo-mon-advertising-pads-aml", "mlo-mon-aml-cx-ac", "mlo-mon-fda-scd-severe", "mlo-mon-grupodot-art-prohibidos", "mlo-mon-model-bhv-mlm-eo", 
    "mlo-mon-fda-catalog-similarity", "mlo-mon-bhv-negativizados", "mlo-mon-bhv-no-negativizados", "mlo-mon-brand-detector-serving-app", "mp-pospayment-refunds",
    "mlo-mon-consumer-upsell-no-neg", "mlo-mon-consumer-bhv-mlm", "mlo-mon-consumers-upsell-full", "mlo-mon-cx-male-med-mld", "mlo-mon-cx-oneclick-mld-nlp"]
}

task uploadMeliDataCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["melidata"]
}

task uploadShippingCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["shipping"]
}

task uploadPointCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["point"]
}

task uploadAdvertisingCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["advertising"]
}

task uploadComponentPrintsCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["component_prints"]
}

task uploadCxHelpChannelsPrintsCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["cx_help_channels"]
}

task uploadRecommendationsCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["recommendations"]
}

task uploadMerchCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["merch"]
}

task uploadMonitoringTestAppCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-test-app"]
}

task uploadMonitoringTestAppBusiCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-test-app-busi"]
}

task uploadMonitoringFlanAasCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-flan"]
}

task uploadMonitoringFdaItemsPlusCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-items-plus"]
}

task uploadMonitoringFdaItemsPlusBusiCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-items-plus-busi"]
}

task uploadMonitoringWagnerDeployCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-wagner-deploy"]
}

task uploadMonitoringFraudAutomlApiCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fraud-automl-api"]
}

task uploadMonitoringFlammableTextCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-tagging-flammable-text"]
}

task uploadMonitoringFdaCategorizerAmlCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-categorizer-aml"]
}

task uploadMonitoringAppFakeCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-app-fake"]
}

task uploadMonitoringFdaSCDCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-scd"]
}

task uploadMonitoringShippingTimeCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-shipping-time"]
}

task uploadMonitoringGDLSDomainFakesCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-gdls-domain-fakes"]
}

task uploadMonitoringAutoofertasCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-autoofertasfraude"]
}

task uploadMonitoringAmlCXMedCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-aml-cx-med"]
}

task uploadMonitoringDomainDetectorAwsCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-tagging-domain-detector-aws"]
}

task uploadPortabilityCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mpb-portability"]
}

task uploadPospaymentRefundsCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mp-pospayment-refunds"]
}

task uploadMonitoringFdaCatalogDiscoveryCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-catalog-discovery"]
}

task uploadMonitoringFdaFraudMercadoenviosCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-fraud-mercadoenvios"]
}

task uploadMonitoringFraudMarketplaceCancelCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fraud-marketplace-cancel"]
}

task uploadMonitoringCXOneclickMLDCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-cx-oneclick-mld"]
}

task uploadMonitoringFraudTFPipelineCatalog(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fraud-fda-tf-pipeline"]
}

task uploadMonitoringReplibTrainerCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-replib-trainer"]
}

task uploadMonitoringCreditsMaraCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-credits-mara"]
}

task uploadMonitoringCreditsPFACatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-credits-pfa"]
}

task uploadMonitoringCloudeconomicsEcusCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-cloudeconomics-ecus-fda"]
}

task uploadMonitoringAdvertisingPadsAmlCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-advertising-pads-aml"]
}

task uploadMonitoringAmlCxAcCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-aml-cx-ac"]
}

task uploadMonitoringFdaSCDSevereCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-scd-severe"]
}

task uploadMonitoringGrupodotArtProhibidos(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-grupodot-art-prohibidos"]
}

task uploadMonitoringModelBhvMlmEo(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-model-bhv-mlm-eo"]
}

task uploadMonitoringFdaCatalogSimilarity(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-fda-catalog-similarity"]
}

task uploadMonitoringBhvNegativizados(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-bhv-negativizados"]
}

task uploadMonitoringBhvNoNegativizados(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-bhv-no-negativizados"]
}

task uploadMonitoringBrandDetectorServingAppCatalog(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-brand-detector-serving-app"]
}

task uploadMonitoringConsumerUpsellNoNeg(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-consumer-upsell-no-neg"]
}

task uploadMonitoringConsumerBhvMlm(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-consumer-bhv-mlm"]
}

task uploadMonitoringConsumersUpsellFull(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-consumers-upsell-full"]
}

task uploadMonitoringCxMaleMedMLD(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-cx-male-med-mld"]
}

task uploadMonitoringCxOneclickMLDNLP(type: JavaExec) {
    main = 'com.melidata.definitions.uploaders.CatalogUploader'
    classpath = sourceSets.main.runtimeClasspath
    args = ["mlo-mon-cx-oneclick-mld-nlp"]
}

task uploadMetrics(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.MetricsUploader'
    classpath = sourceSets.main.runtimeClasspath
}

task validate(type:JavaExec) {
    main = 'com.melidata.definitions.validators.Validate'
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty('args')) args project.args.split()
}

task uploadWhitelist(type:JavaExec) {
    main = 'com.melidata.definitions.uploaders.WhitelistPathUploader'
    classpath = sourceSets.main.runtimeClasspath
}

task lint(type:JavaExec) {
    main = "com.melidata.definitions.task.CatalogLintTask"
    classpath = sourceSets.main.runtimeClasspath
    args = ["melidata"]
}

task bootRepackage {
}

publishing {
    println("Publishing version ${version} to repository")

    publications {
        mavenJava(MavenPublication) {
            artifactId 'definitions'
            version version
            groupId group

            from components.java
        }
    }
}
